local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local ServerStorage = game:GetService("ServerStorage")

local spawnPetEvent = ReplicatedStorage:WaitForChild("SpawnPetEvent")
local SpawnOwnedPetEvent = ReplicatedStorage:WaitForChild("SpawnOwnedPetEvent")
local Players = game:GetService("Players")

local PET_CLICK_COST = 10 -- Define how many clicks it costs to hatch an egg

local function followPlayer(pet, player)
	local connection
	connection = RunService.Heartbeat:Connect(function()
		if not pet or not pet.Parent or not player.Character then
			connection:Disconnect()
			return
		end

		local hrp = player.Character:FindFirstChild("HumanoidRootPart")
		if hrp then
			local targetPosition = hrp.Position + Vector3.new(2, 0, 2)
			pet.PrimaryPart.Position = pet.PrimaryPart.Position:Lerp(targetPosition, 0.05)
		end
	end)
end

local function spawnPet(player, petName, allowMultiple)
	if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
		return nil
	end

	local petUniqueName = player.Name .. "_" .. petName

	if not allowMultiple then
		local existingPet = game.Workspace:FindFirstChild(petUniqueName)
		if existingPet then
			return existingPet
		end
	end

	local petModel = ServerStorage:FindFirstChild(petName)
	if not petModel then
		warn("❌ ERROR: Pet model '" .. petName .. "' not found in ServerStorage!")
		return nil
	end

	if not petModel.PrimaryPart then
		warn("❌ ERROR: Pet model '" .. petName .. "' has no PrimaryPart set!")
		return nil
	end

	local petClone = petModel:Clone()
	petClone.Name = petUniqueName
	petClone.Parent = game.Workspace
	pcall(function()
		petClone:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame * CFrame.new(2, 0, 2))
	end)
	followPlayer(petClone, player)
	return petClone
end

local function addPetToInventory(player, petName)
	local petFolder = player:FindFirstChild("Pets")
	if not petFolder then
		petFolder = Instance.new("Folder")
		petFolder.Name = "Pets"
		petFolder.Parent = player
	end

	local counter = 1
	local inventoryPetName = petName
	while petFolder:FindFirstChild(inventoryPetName .. "_" .. counter) do
		counter = counter + 1
	end
	inventoryPetName = petName .. "_" .. counter

	local newPet = Instance.new("StringValue")
	newPet.Name = inventoryPetName
	newPet.Value = petName
	newPet.Parent = petFolder
	print("✅ " .. petName .. " (instance " .. counter .. ") added to " .. player.Name .. "'s inventory!")
	return inventoryPetName
end

-- Auto-spawn all pets on join
--[[Players.PlayerAdded:Connect(function(player)
	local character = player.Character or player.CharacterAdded:Wait()
	local petFolder = player:FindFirstChild("Pets")
	if petFolder then
		for _, pet in ipairs(petFolder:GetChildren()) do
			local spawnedPet = SpawnOwnedPetEvent(player, "Dog")
			if spawnedPet then
				print("✅ Pet '" .. pet.Value .. "' spawned for " .. player.Name .. " on join!")
			end
		end
	end
end)]]


spawnPetEvent.OnServerEvent:Connect(function(player, petName)
	-- Check leaderstats and Clicks
	local leaderstats = player:FindFirstChild("leaderstats")
	if not leaderstats then
		warn("❌ ERROR: No leaderstats for " .. player.Name)
		return
	end

	local clicks = leaderstats:FindFirstChild("Clicks")
	if not clicks then
		warn("❌ ERROR: No Clicks in leaderstats for " .. player.Name)
		return
	end

	-- Check if player has enough clicks to hatch
	if clicks.Value < PET_CLICK_COST then
		print(player.Name .. " needs " .. (PET_CLICK_COST - clicks.Value) .. " more clicks to hatch an egg!")
		return
	end

	-- Deduct clicks
	clicks.Value = clicks.Value - PET_CLICK_COST
	print(player.Name .. " spent " .. PET_CLICK_COST .. " clicks to hatch an egg! Clicks now: " .. clicks.Value)

	-- Add pet to inventory and spawn it
	local inventoryPetName = addPetToInventory(player, petName)
	local spawnedPet = spawnPet(player, petName, true)
	if spawnedPet then
		print("✅ Pet '" .. petName .. "' spawned for " .. player.Name .. "!")
	else
		warn("❌ Failed to spawn pet '" .. petName .. "' for " .. player.Name)
	end
end)

SpawnOwnedPetEvent.OnServerEvent:Connect(function(player, petName)
	local petFolder = player:FindFirstChild("Pets")
	if not petFolder then
		warn("❌ ERROR: " .. player.Name .. " does not own any pets!")
		return
	end

	local ownsPet = false
	for _, pet in ipairs(petFolder:GetChildren()) do
		if pet.Value == petName or pet.Name == petName then
			ownsPet = true
			break
		end
	end
	if not ownsPet then
		warn("❌ ERROR: " .. player.Name .. " does not own a pet named '" .. petName .. "'")
		return
	end

	local spawnedPet = spawnPet(player, petName, false)
	if spawnedPet then
		print("✅ " .. petName .. " spawned for " .. player.Name .. "!")
	end
end)
