local RS = game.ReplicatedStorage
local Config = require(RS.Pets.Eggs)
local Models = RS.Pets.Models
local CurrentTarget = script.Parent.CurrentTarget
local CostLabel = script.Parent.CostLabel
local PetsFrame = script.Parent.PetsFrame

function resetFrame()
	for _, Slot in pairs(PetsFrame:GetChildren()) do
		if not ({Shadow = true, UIStroke = true, UICorner = true})[Slot.Name] then
			for _, Item in pairs(Slot.PetView:GetChildren()) do
				Item:Destroy()
			end
			Slot.Percentage.Text = ""
			Slot.Rarity.Text = ""
			Slot.ImageColor3 = Color3.fromRGB(25, 25, 25)
		end
	end
end

CurrentTarget:GetPropertyChangedSignal("Value"):Connect(function()
	if CurrentTarget.Value ~= "None" then
		local Egg = Config[CurrentTarget.Value]
		local Cost = Egg.Cost
		local Currency = Egg.Currency

		-- Safely get the CurrencyImage
		local CurrencyImage = "" -- Default to an empty string
		local currencyImageObject = RS.Pets.Settings:WaitForChild(Currency.."Image", 5)
		if currencyImageObject then
			local potentialImage = currencyImageObject.Value
			if potentialImage and string.match(potentialImage, "^rbxassetid://%d+$") then
				CurrencyImage = potentialImage
			else
				warn("Currency image object '" .. Currency.."Image" .. "' has an invalid ContentId: " .. tostring(potentialImage))
			end
		else
			warn("Currency image object '" .. Currency.."Image" .. "' not found in ReplicatedStorage.Pets.Settings after waiting 5 seconds")
		end

		local Counter = 0
		local Pets = {}
		for _, Pet in pairs(Egg.Pets) do
			Pets[#Pets + 1] = {Name = Pet.Name, Type = Pet.Type, Rarity = Pet.Rarity, Secret = Pet.Secret}
			Counter = Counter + Pet.Rarity
		end
		CostLabel.CurrencyImage.Image = CurrencyImage
		CostLabel.TextLabel.Text = Cost
		table.sort(Pets,
			function(a, b)
				return a.Rarity > b.Rarity
			end
		)
		if Currency ~= "R$" then
			script.Parent.BuyButtonR.Visible = true
			script.Parent.BuyButtonT.Visible = true
			script.Parent.BuyButtonE.Size = script.Parent.BuyButtonR.Size
		else
			script.Parent.BuyButtonR.Visible = false
			script.Parent.BuyButtonT.Visible = false
			script.Parent.BuyButtonE.Size = script.Parent.CostLabel.Size
		end
		resetFrame()
		for i, v in pairs(Pets) do
			if v.Secret == false then
				local PetName = v.Name
				local petModelFolder = Models:WaitForChild(PetName, 5) -- Wait up to 5 seconds
				if petModelFolder then
					local PetModel = petModelFolder:WaitForChild(v.Type, 5)
					if PetModel then
						PetModel = PetModel:Clone()
						if PetModel:IsA("Model") then
							if not PetModel.PrimaryPart then
								local primaryPart = PetModel:FindFirstChildWhichIsA("BasePart")
								if primaryPart then
									PetModel.PrimaryPart = primaryPart
								else
									warn("Pet model '" .. PetName .. "' type '" .. v.Type .. "' has no BasePart to set as PrimaryPart")
								end
							end
							if PetModel.PrimaryPart then
								local Slot = PetsFrame:FindFirstChild("Slot"..i)
								local Viewport = Slot.PetView
								local Percentage = math.floor((v.Rarity/Counter)*10000)/100
								local settings = petModelFolder:FindFirstChild("Settings")
								local Rarity = "Unknown"
								if settings then
									local rarityValue = settings:FindFirstChild("Rarity")
									if rarityValue then
										Rarity = rarityValue.Value
									else
										warn("Rarity value not found in Settings for pet '" .. PetName .. "' in ReplicatedStorage.Pets.Models")
									end
								else
									warn("Settings not found for pet '" .. PetName .. "' in ReplicatedStorage.Pets.Models")
								end
								local RarityColor = Color3.fromRGB(255, 255, 255) -- Default to white
								local rarityFolder = RS.Pets.Rarities:FindFirstChild(Rarity)
								if rarityFolder then
									local colorValue = rarityFolder:FindFirstChild("Color")
									if colorValue then
										RarityColor = colorValue.Value
									else
										warn("Color value not found for rarity '" .. Rarity .. "' in ReplicatedStorage.Pets.Rarities")
									end
								else
									warn("Rarity '" .. Rarity .. "' not found in ReplicatedStorage.Pets.Rarities")
								end
								local Camera = Instance.new("Camera", Viewport)
								local Pos = Vector3.new(0, 0, 0)
								Viewport.CurrentCamera = Camera
								PetModel:SetPrimaryPartCFrame(CFrame.new(Pos))
								PetModel.Parent = Viewport
								Slot.Percentage.Text = Percentage.."%"
								Slot.Rarity.Text = Rarity
								Slot.Rarity.TextColor3 = RarityColor
								Slot.ImageColor3 = Color3.fromRGB(55, 55, 55)
								spawn(function()
									local rot = 180
									while wait() do
										if PetModel.Parent ~= nil then
											Camera.CFrame = CFrame.Angles(0, math.rad(rot), 0) * CFrame.new(Pos + Vector3.new(0, 0, 3), Pos + Vector3.new(0, 0, 0))
											rot = rot + 1
										else
											break
										end
									end
								end)
							else
								warn("Pet model '" .. PetName .. "' type '" .. v.Type .. "' has no PrimaryPart and cannot be positioned")
							end
						else
							warn("Cloned object for pet '" .. PetName .. "' type '" .. v.Type .. "' is not a Model, it's a " .. PetModel.ClassName)
						end
					else
						warn("Pet type '" .. v.Type .. "' not found for pet '" .. PetName .. "' in ReplicatedStorage.Pets.Models after waiting 5 seconds")
					end
				else
					warn("Pet model '" .. PetName .. "' not found in ReplicatedStorage.Pets.Models after waiting 5 seconds")
				end
			end
		end
	else
		resetFrame()
	end
end)
